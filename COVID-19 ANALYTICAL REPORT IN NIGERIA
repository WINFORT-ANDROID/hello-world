{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_death = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')\n",
    "# df_death = pd.read_csv('./data/covid19_confirmed.csv')\n",
    "pd.set_option('display.max_columns', 70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_china = df_death.loc[df_death['Country/Region'] == 'China']\n",
    "death_total_china = df_china.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_china"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_us = df_death.loc[df_death['Country/Region'] == 'US']\n",
    "death_total_us = df_us.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_italy = df_death.loc[df_death['Country/Region'] == 'Italy']\n",
    "death_total_italy = df_italy.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_italy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_spain = df_death.loc[df_death['Country/Region'] == 'Spain']\n",
    "death_total_spain = df_spain.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_spain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_iran = df_death.loc[df_death['Country/Region'] == 'Iran']\n",
    "death_total_iran = df_iran.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_iran"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_uk = df_death.loc[df_death['Country/Region'] == 'United Kingdom']\n",
    "death_total_uk = df_uk.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_uk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 6, 9,\n",
       "       11, 19, 19, 33, 48, 48, 79, 91, 91, 149, 149, 149, 244, 451, 563,\n",
       "       676, 862, 1102, 1333, 1698, 1997, 2317, 2611, 3030], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_france = df_death.loc[df_death['Country/Region'] == 'France']\n",
    "death_total_france = df_france.sum(axis=0, skipna=True)[4: ].values\n",
    "death_total_france"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sl = df_death.loc[df_death['Country/Region'] == 'Sri Lanka']\n",
    "death_total_sl = df_sl.sum(axis=0, skipna=True)[4: ].values\n",
    "# death_total_sl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "death_total_date = df_uk.columns[4:]\n",
    "# death_total_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 5), dpi=100)\n",
    "\n",
    "plt.plot(death_total_date, death_total_china, label='China', linewidth=2, marker='.', markersize=8, color='#C93756', markeredgecolor='#C93756')\n",
    "plt.plot(death_total_date, death_total_italy, label='Italy', linewidth=2, marker='.', markersize=8, color='#8E44AD', markeredgecolor='#8E44AD')\n",
    "plt.plot(death_total_date, death_total_spain, label='Spain', linewidth=2, marker='.', markersize=8, markeredgecolor='#FFA631', color='#FFA631')\n",
    "plt.plot(death_total_date, death_total_iran, label='Iran', linewidth=2, marker='.', markersize=8, markeredgecolor='#049372', color='#049372')\n",
    "plt.plot(death_total_date, death_total_us, label='US', linewidth=2, marker='.', markersize=8, markeredgecolor='#1F4788', color='#1F4788')\n",
    "\n",
    "# plt.plot(death_total_date, death_total_france, label='France', linewidth=2, marker='.', markersize=8, markeredgecolor='blue', color='blue')\n",
    "# plt.plot(death_total_date, death_total_uk, label='UK', linewidth=2, marker='.', markersize=8, markeredgecolor='blue', color='blue')\n",
    "\n",
    "# plt.bar(death_total_date, death_total_sl, label='Sri Lanka', color='#C93756')\n",
    "\n",
    "\n",
    "plt.title('COVID-19 Deaths', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})\n",
    "plt.xlabel('date', fontdict={'fontname': 'Comic Sans MS'})\n",
    "plt.ylabel('deaths reported', fontdict={'fontname': 'Comic Sans MS'})\n",
    "plt.xticks(death_total_date[4::7])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

